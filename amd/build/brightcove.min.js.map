{"version":3,"sources":["../src/brightcove.js"],"names":["define","$","Ajax","interval","onPageLoaded","loadBrightCoveJs","accountId","playerId","window","require","config","waitSeconds","disableForwardScrubbing","player","setSource","srcObj","next","setCurrentTime","ct","percentPlayed","currentTime","duration","html5PlayerGenericPlayerEventListener","html5player","cm","cmid","video_id","on","mediainfo","id","console","info","setInterval","Math","ceil","log","set_course_module_progress","progress_interval","clearInterval","html5playerSetProgress","results","progress","floor","videoid","ended","promise","call","methodname","args","then","completed","toggledEvent","CustomEvent","bubbles","detail","activityname","name","withAvailability","document","dispatchEvent","fail","e","get_single_video_course_module_progress","get_playlist_video_progress","response","progresses","length","playlists","playlist","result","index","findIndex","video","currentItem","currentItemIndex","find","html5playerOnLoadSingleVideoMetaData","html5playerOnPlaySingleVideo","html5playerOnLoadPlaylistMetaData","html5playerOnPlayPlaylist","nextVideo","init","initBrightCovePlayer","JSON","parse","account_id","player_id","videojs","use","is_student","myPlayer","getPlayer","video_type"],"mappings":"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","sourcesContent":["define(['jquery','core/ajax'], function ($, Ajax) {\n\n    let interval;\n\n    let onPageLoaded;\n\n    const VIDEO_TYPE_SINGLE_VIDEO = 1;\n\n    const VIDEO_TYPE_PLAYLIST = 2;\n\n    /**\n     * Load brightcove player javascript.\n     * @param accountId\n     * @param playerId\n     */\n    const loadBrightCoveJs = (accountId, playerId) => {\n        window.require.config({\n            'paths': {\n                'bc': `https://players.brightcove.net/${accountId}/${playerId}_default/index.min`\n            },\n            waitSeconds: 30\n        });\n    }\n\n    const disableForwardScrubbing = function(player) {\n        return {\n            // +++ Implement setSource() +++\n            setSource: function setSource(srcObj, next) {\n                next(null, srcObj);\n            },\n            // +++ Alter the setCurrentTime method +++\n            setCurrentTime: function setCurrentTime(ct) {\n                const percentAllowForward = 50,\n                    // Determine percentage of video played\n                    percentPlayed = player.currentTime() / player.duration() * 100;\n                // Check if the time scrubbed to is less than the current time\n                // or if passed scrub forward percentage\n                if ( ct < player.currentTime() || percentPlayed > percentAllowForward ) {\n                    // If true, move playhead to desired time\n                    return ct;\n                }\n                // If time scrubbed to is past current time and not passed percentage\n                // leave playhead at current time\n                return player.currentTime();\n            }\n        }\n    };\n\n    /**\n     * Common event listener for brightcove Player.\n     * @param player\n     * @param html5player\n     */\n    const html5PlayerGenericPlayerEventListener = (player, html5player) => {\n        const cm = html5player.cmid;\n        let video_id = html5player.video_id;\n\n        player.on('play',(e)=> {\n            video_id = player.mediainfo.id;\n            console.info(`Video: ${player.mediainfo.id} started playing...`)\n            interval = player.setInterval(function(){\n                const currentTime = Math.ceil(player.currentTime());\n                console.log(`Video playing. Total length: ${player.duration()}. Video current progress is : ${player.currentTime()}`)\n                set_course_module_progress(html5player, cm,video_id,currentTime)\n            }, +html5player.progress_interval);\n\n        })\n\n        player.on('pause',(e)=>{\n            player.clearInterval(interval);\n        })\n    }\n\n    /**\n     * @param player\n     * @param results\n     */\n    const html5playerSetProgress = (player, results) => {\n        let progress = results?.progress\n        if (progress){\n            const duration = player.duration();\n            const currentTime = Math.floor(progress) / 1000;\n            console.info(`Duration is: ${duration} and Video progress is ${currentTime} seconds`);\n            if(duration >= currentTime){\n                player.currentTime(currentTime);\n            }\n            // else {\n            //     player.currentTime(duration - 1);\n            // }\n        }else {\n            console.info(`Video progress is ${progress}`);\n        }\n    }\n\n    /**\n     * Set course module video progress\n     * @param id\n     * @param videoid\n     * @param progress\n     * @param ended\n     */\n    const set_course_module_progress = (html5player, id, videoid, progress, ended=false) => {\n        let promise;\n\n        promise = Ajax.call([{\n            methodname: 'mod_html5player_set_module_progress',\n            args: {\n                id, // course module id.\n                videoid, // Brightcove video id.\n                progress, // Progress percentage\n                ended, // Progress percentage\n            }\n        }]);\n\n        promise[0].then(function(results) {\n            console.info(`Video completed : ${results.completed}`);\n            if (results.completed) {\n                const toggledEvent = new CustomEvent('core_course:html5player_view_completed', {\n                    bubbles: true,\n                    detail: {\n                        id: id,\n                        activityname: html5player.name,\n                        completed: results.completed,\n                        withAvailability: '',\n                    }\n                });\n                // Dispatch the manualCompletionToggled custom event.\n                document.dispatchEvent(toggledEvent);\n            }\n\n        }).fail((e) => {\n            console.log(e)\n        });\n    }\n\n    /**\n     * Get course module single video progress.\n     * @param player\n     * @param html5player\n     */\n    const get_single_video_course_module_progress = (player, html5player) => {\n        let promise;\n\n        console.info(`Geting course video progress from store...`)\n        promise = Ajax.call([{\n            methodname: 'mod_html5player_get_module_progress',\n            args: {\n                id: html5player.cmid, // course module id.\n                videoid: html5player.video_id, // html5videos table PK.\n            }\n        }]);\n\n        promise[0].then(function(results) {\n            console.info(`Fetched result from store`);\n            html5playerSetProgress(player, results);\n        }).fail((e) => {\n            console.log(e)\n        });\n    }\n\n    /**\n     * Get course module single video progress.\n     * @param player\n     * @param html5player\n     */\n    const get_playlist_video_progress = (player, html5player) => {\n        let promise;\n\n        console.info(`Getting course video progresses from store...`)\n        promise = Ajax.call([{\n            methodname: 'mod_html5player_get_module_progresses',\n            args: {\n                id: html5player.cmid, // course module id.\n            }\n        }]);\n\n        promise[0].then(function(response) {\n            console.info(`Fetched module progresses result from store`);\n            if (response.progresses?.length > 0){\n                const playlists = player.playlist();\n                let result;\n                if (onPageLoaded){\n                    console.info('Current item progress set after first time dom load...');\n                    result = response.progresses[0];\n                    const index = playlists.findIndex(video => video.id == result.video_id);\n                    if (index>=0){\n                        player.playlist.currentItem(index);\n                        html5playerSetProgress(player, result);\n                        onPageLoaded = false;\n                    }\n                }else {\n                    const currentItemIndex = player.playlist.currentItem();\n                    const currentItem = playlists[currentItemIndex]\n                    result = response.progresses.find(video => video.video_id == currentItem.id )\n                    html5playerSetProgress(player, result);\n                }\n\n            }\n        }).fail((e) => {\n            console.log(e)\n        });\n    }\n\n    /**\n     * On Load meta data event and listener\n     * @param player\n     * @param html5player\n     */\n    const html5playerOnLoadSingleVideoMetaData = (player, html5player) => {\n        player.on('loadedmetadata', function(e){\n            console.info('Single video player meta data loaded...')\n            get_single_video_course_module_progress(player,html5player);\n        });\n    }\n\n    /**\n     * Event listener for single video.\n     * @param player\n     * @param html5player\n     */\n    const html5playerOnPlaySingleVideo = (player,html5player) => {\n        html5PlayerGenericPlayerEventListener(player, html5player);\n\n        player.on('ended',(e)=>{\n            const currentTime = Math.ceil( player.duration());\n            console.log(`Video ended... Video id: ${player.mediainfo.id}, Duration: ${player.duration()}`)\n            set_course_module_progress(html5player, html5player.cmid,html5player.video_id,currentTime,true)\n            player.clearInterval(interval);\n        })\n    }\n\n    /**\n     * On load playlists meta data\n     * @param player\n     * @param html5player\n     * @param onpageload\n     */\n    const html5playerOnLoadPlaylistMetaData = (player, html5player) => {\n        player.on('loadedmetadata',(e) => {\n            console.info('playlist videos player meta data loaded...');\n            get_playlist_video_progress(player, html5player);\n        });\n    }\n\n    /**\n     * Event listener for playlist.\n     * @param player\n     * @param html5player\n     */\n    const html5playerOnPlayPlaylist = (player, html5player) => {\n        html5PlayerGenericPlayerEventListener(player, html5player);\n        player.on('beforeplaylistitem', e => {\n            console.log(`Event: beforeplaylistitem -> Switching to new video ...`);\n            player.clearInterval(interval) ;\n        });\n\n        player.on('ended',(e)=>{\n            const currentTime = Math.ceil( player.duration());\n            console.log(`Video ended...`)\n            set_course_module_progress(html5player, html5player.cmid,player.mediainfo.id,currentTime, true)\n            player.clearInterval(interval);\n            const nextVideo = player.playlist.next();\n            console.info(`Start playing to next video : ${nextVideo.id}`)\n        })\n    }\n\n    // const initBrightCovePlayer = (course, cm, accountId, playerId, video_id) => {\n    const initBrightCovePlayer = (html5player) => {\n        html5player = JSON.parse(html5player);\n        // Make brightcove js in Require js module as bc.\n        loadBrightCoveJs(html5player.account_id, html5player.player_id);\n\n        require(['bc'], function(bc) {\n\n            // Register the middleware with the player\n            videojs.use('*', disableForwardScrubbing);\n\n            console.info(`Brightcove player js loaded...`);\n            // Tracking is enabled for only student.\n            if (html5player.is_student ){\n                const myPlayer = videojs.getPlayer(`brightcove-player-${html5player.player_id}`);\n\n                if (html5player.video_type == VIDEO_TYPE_SINGLE_VIDEO){\n                    // Do meta loaded stuffs here.\n                    console.info('User is a student and Video type single video...');\n                    html5playerOnLoadSingleVideoMetaData(myPlayer, html5player);\n                    // Do Start playing stuffs here.\n                    html5playerOnPlaySingleVideo(myPlayer,html5player);\n                }else if( html5player.video_type == VIDEO_TYPE_PLAYLIST) {\n                    console.info('User is a student and Video type playlists video...');\n                    html5playerOnLoadPlaylistMetaData(myPlayer, html5player);\n                    onPageLoaded = true;\n                    html5playerOnPlayPlaylist(myPlayer, html5player);\n                }\n            }\n        });\n    }\n\n    return {\n       init: initBrightCovePlayer\n   }\n});"],"file":"brightcove.min.js"}