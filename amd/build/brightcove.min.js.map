{"version":3,"sources":["../src/brightcove.js"],"names":["define","$","Ajax","interval","html5PlayerGenericPlayerEventListener","player","html5player","cm","cmid","video_id","on","console","info","mediainfo","id","setInterval","currentTime","Math","ceil","log","duration","set_course_module_progress","progress_interval","clearInterval","loadBrightCoveJs","accountId","playerId","window","require","config","waitSeconds","videoid","progress","promise","call","methodname","args","then","results","completed","fail","e","get_single_video_course_module_progress","floor","get_playlist_video_progress","html5playerOnLoadSingleVideoMetaData","html5playerOnLoadPlaylistMetaData","playlist","currentItem","html5playerOnPlaySingleVideo","html5playerOnPlayPlaylist","init","initBrightCovePlayer","JSON","parse","account_id","player_id","is_student","myPlayer","videojs","getPlayer","video_type"],"mappings":"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","sourcesContent":["define(['jquery','core/ajax'], function ($, Ajax) {\n\n    let interval;\n\n    /**\n     * Common event listener for brightcove Player.\n     * @param player\n     * @param html5player\n     */\n    const html5PlayerGenericPlayerEventListener = (player, html5player) => {\n        const cm = html5player.cmid;\n        let video_id = html5player.video_id;\n\n        player.on('play',(e)=> {\n            console.info(`Video started playing...`)\n            video_id = player.mediainfo.id;\n            interval = player.setInterval(function(){\n                const currentTime = Math.ceil(player.currentTime());\n                console.log(`Video playing. Total length: ${player.duration()}. Video current progress is : ${currentTime}`)\n                set_course_module_progress(cm,video_id,currentTime)\n            }, +html5player.progress_interval);\n\n        })\n\n        player.on('pause',(e)=>{\n            player.clearInterval(interval);\n        })\n\n        player.on('ended',(e)=>{\n            const currentTime = Math.ceil( player.duration());\n            console.log(`Video ended...`)\n            set_course_module_progress(cm,video_id,currentTime)\n            player.clearInterval(interval);\n        })\n    }\n\n    /**\n     * Load brightcove player javascript.\n     * @param accountId\n     * @param playerId\n     */\n    const loadBrightCoveJs = (accountId, playerId) => {\n        window.require.config({\n            'paths': {\n                'bc': `https://players.brightcove.net/${accountId}/${playerId}_default/index.min`\n            },\n            waitSeconds: 30\n        });\n    }\n\n    /**\n     * Set course module video progress\n     * @param id\n     * @param videoid\n     * @param progress\n     */\n    const set_course_module_progress = (id, videoid, progress) => {\n        let promise;\n\n        promise = Ajax.call([{\n            methodname: 'mod_html5player_set_module_progress',\n            args: {\n                id, // course module id.\n                videoid, // Brightcove video id.\n                progress, // Progress percentage\n            }\n        }]);\n\n        promise[0].then(function(results) {\n            console.info(`Video completed : ${results.completed}`)\n\n        }).fail((e) => {\n            console.log(e)\n        });\n    }\n\n    /**\n     * Get course module single video progress.\n     * @param player\n     * @param html5player\n     */\n    const get_single_video_course_module_progress = (player, html5player) => {\n        let promise;\n\n        console.info(`Geting course video progress from store...`)\n        promise = Ajax.call([{\n            methodname: 'mod_html5player_get_module_progress',\n            args: {\n                id: html5player.cmid, // course module id.\n                videoid: html5player.video_id, // html5videos table PK.\n            }\n        }]);\n\n        promise[0].then(function(results) {\n            console.info(`Fetched result from store`);\n            let progress = results.progress\n            if (progress){\n                const duration = player.duration();\n                const currentTime = Math.floor(results.progress) / 1000;\n                console.info(`Duration is: ${duration} and Video progress is ${currentTime} seconds`);\n                if(duration >= currentTime){\n                    player.currentTime(currentTime);\n                }else {\n                    player.currentTime(duration - 1);\n                }\n            }else {\n                console.info(`Video progress is ${results.progress}`);\n            }\n\n        }).fail((e) => {\n            console.log(e)\n        });\n    }\n\n\n    /**\n     * Get course module single video progress.\n     * @param player\n     * @param html5player\n     */\n    const get_playlist_video_progress = (player, html5player) => {\n        let promise;\n\n        console.info(`Getting course video progresses from store...`)\n        promise = Ajax.call([{\n            methodname: 'mod_html5player_get_module_progresses',\n            args: {\n                id: html5player.cmid, // course module id.\n            }\n        }]);\n\n        promise[0].then(function(results) {\n            console.info(`Fetched module progresses result from store`);\n            console.log(results);\n            // let progress = results.progress\n            // if (progress){\n            //     const duration = player.duration();\n            //     const currentTime = Math.floor(results.progress) / 1000;\n            //     console.info(`Duration is: ${duration} and Video progress is ${currentTime} seconds`);\n            //     if(duration >= currentTime){\n            //         player.currentTime(currentTime);\n            //     }else {\n            //         player.currentTime(duration - 1);\n            //     }\n            // }else {\n            //     console.info(`Video progress is ${results.progress}`);\n            // }\n\n        }).fail((e) => {\n            console.log(e)\n        });\n    }\n\n    /**\n     * On Load meta data event and listener\n     * @param player\n     * @param html5player\n     */\n    const html5playerOnLoadSingleVideoMetaData = (player, html5player) => {\n        const cm = html5player.cmid;\n        const video_id = html5player.video_id;\n        player.on('loadedmetadata', function(e){\n            console.info('Single video player meta data loaded...')\n            get_single_video_course_module_progress(player,html5player);\n        });\n    }\n\n    /**\n     * On load playlislt meta data\n     * @param player\n     * @param html5player\n     */\n    const html5playerOnLoadPlaylistMetaData = (player, html5player) => {\n        let playlists  = null;\n        player.on('loadedmetadata',(e) => {\n            console.info('playlist videos player meta data loaded...');\n            get_playlist_video_progress(player, html5player);\n            playlists = player.playlist();\n            const currentItem = player.playlist.currentItem();\n            // console.log(playlists);\n            // console.log(currentItem);\n            // console.log(playlists[currentItem]);\n\n            // if (player.playlist.contains(currentItem)){\n            //     console.log(playlists[currentItem]);\n            // }\n        });\n    }\n\n    /**\n     * Event listener for single video.\n     * @param player\n     * @param html5player\n     */\n    const html5playerOnPlaySingleVideo = (player,html5player) => {\n        html5PlayerGenericPlayerEventListener(player, html5player);\n    }\n\n    /**\n     * Event listener for playlist.\n     * @param player\n     * @param html5player\n     */\n    const html5playerOnPlayPlaylist = (player, html5player) => {\n        html5PlayerGenericPlayerEventListener(player, html5player);\n\n        player.on('beforeplaylistitem', e => {\n            console.log(`Event: beforeplaylistitem -> Switching to new video ...`);\n            player.clearInterval(interval) ;\n        });\n    }\n\n    // const initBrightCovePlayer = (course, cm, accountId, playerId, video_id) => {\n    const initBrightCovePlayer = (html5player) => {\n        html5player = JSON.parse(html5player);\n        // Make brightcove js in Require js module as bc.\n        loadBrightCoveJs(html5player.account_id, html5player.player_id);\n\n        require(['bc'], function(bc) {\n            console.info(`Brightcove player js loaded...`);\n            // Tracking is enabled for only student.\n            if (html5player.is_student ){\n                const myPlayer = videojs.getPlayer(`brightcove-player-${html5player.player_id}`);\n\n                if (html5player.video_type == 1){\n                    // Do meta loaded stuffs here.\n                    console.info('User is a student and Video type single video...');\n                    html5playerOnLoadSingleVideoMetaData(myPlayer, html5player);\n                    // Do Start playing stuffs here.\n                    html5playerOnPlaySingleVideo(myPlayer,html5player);\n                }else if( html5player.video_type == 2) {\n                    console.info('User is a student and Video type playlists video...');\n                    html5playerOnLoadPlaylistMetaData(myPlayer, html5player);\n                    html5playerOnPlayPlaylist(myPlayer, html5player);\n                }\n            }\n        });\n    }\n\n    return {\n       init: initBrightCovePlayer\n   }\n});"],"file":"brightcove.min.js"}