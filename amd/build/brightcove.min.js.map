{"version":3,"sources":["../src/brightcove.js"],"names":["define","$","Ajax","interval","onPageLoaded","loadBrightCoveJs","accountId","playerId","window","require","config","waitSeconds","html5PlayerGenericPlayerEventListener","player","html5player","cm","cmid","video_id","on","mediainfo","id","console","info","setInterval","currentTime","Math","ceil","log","duration","set_course_module_progress","progress_interval","clearInterval","html5playerSetProgress","results","progress","floor","videoid","ended","promise","call","methodname","args","then","completed","toggledEvent","CustomEvent","bubbles","detail","activityname","name","withAvailability","document","dispatchEvent","fail","e","get_single_video_course_module_progress","get_playlist_video_progress","response","progresses","length","playlists","playlist","result","index","findIndex","video","currentItem","currentItemIndex","find","html5playerOnLoadSingleVideoMetaData","html5playerOnPlaySingleVideo","html5playerOnLoadPlaylistMetaData","html5playerOnPlayPlaylist","nextVideo","next","init","initBrightCovePlayer","JSON","parse","account_id","player_id","is_student","myPlayer","videojs","getPlayer","video_type"],"mappings":"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","sourcesContent":["define(['jquery','core/ajax'], function ($, Ajax) {\n\n    let interval;\n\n    let onPageLoaded;\n\n    const VIDEO_TYPE_SINGLE_VIDEO = 1;\n\n    const VIDEO_TYPE_PLAYLIST = 2;\n\n    /**\n     * Load brightcove player javascript.\n     * @param accountId\n     * @param playerId\n     */\n    const loadBrightCoveJs = (accountId, playerId) => {\n        window.require.config({\n            'paths': {\n                'bc': `https://players.brightcove.net/${accountId}/${playerId}_default/index.min`\n            },\n            waitSeconds: 30\n        });\n    }\n\n    /**\n     * Common event listener for brightcove Player.\n     * @param player\n     * @param html5player\n     */\n    const html5PlayerGenericPlayerEventListener = (player, html5player) => {\n        const cm = html5player.cmid;\n        let video_id = html5player.video_id;\n\n        player.on('play',(e)=> {\n            video_id = player.mediainfo.id;\n            console.info(`Video: ${player.mediainfo.id} started playing...`)\n            interval = player.setInterval(function(){\n                const currentTime = Math.ceil(player.currentTime());\n                console.log(`Video playing. Total length: ${player.duration()}. Video current progress is : ${player.currentTime()}`)\n                set_course_module_progress(html5player, cm,video_id,currentTime)\n            }, +html5player.progress_interval);\n\n        })\n\n        player.on('pause',(e)=>{\n            player.clearInterval(interval);\n        })\n    }\n\n    /**\n     * @param player\n     * @param results\n     */\n    const html5playerSetProgress = (player, results) => {\n        let progress = results?.progress\n        if (progress){\n            const duration = player.duration();\n            const currentTime = Math.floor(progress) / 1000;\n            console.info(`Duration is: ${duration} and Video progress is ${currentTime} seconds`);\n            if(duration >= currentTime){\n                player.currentTime(currentTime);\n            }\n            // else {\n            //     player.currentTime(duration - 1);\n            // }\n        }else {\n            console.info(`Video progress is ${progress}`);\n        }\n    }\n\n    /**\n     * Set course module video progress\n     * @param id\n     * @param videoid\n     * @param progress\n     * @param ended\n     */\n    const set_course_module_progress = (html5player, id, videoid, progress, ended=false) => {\n        let promise;\n\n        promise = Ajax.call([{\n            methodname: 'mod_html5player_set_module_progress',\n            args: {\n                id, // course module id.\n                videoid, // Brightcove video id.\n                progress, // Progress percentage\n                ended, // Progress percentage\n            }\n        }]);\n\n        promise[0].then(function(results) {\n            console.info(`Video completed : ${results.completed}`);\n            if (results.completed) {\n                const toggledEvent = new CustomEvent('core_course:html5player_view_completed', {\n                    bubbles: true,\n                    detail: {\n                        id: id,\n                        activityname: html5player.name,\n                        completed: results.completed,\n                        withAvailability: '',\n                    }\n                });\n                // Dispatch the manualCompletionToggled custom event.\n                document.dispatchEvent(toggledEvent);\n            }\n\n        }).fail((e) => {\n            console.log(e)\n        });\n    }\n\n    /**\n     * Get course module single video progress.\n     * @param player\n     * @param html5player\n     */\n    const get_single_video_course_module_progress = (player, html5player) => {\n        let promise;\n\n        console.info(`Geting course video progress from store...`)\n        promise = Ajax.call([{\n            methodname: 'mod_html5player_get_module_progress',\n            args: {\n                id: html5player.cmid, // course module id.\n                videoid: html5player.video_id, // html5videos table PK.\n            }\n        }]);\n\n        promise[0].then(function(results) {\n            console.info(`Fetched result from store`);\n            html5playerSetProgress(player, results);\n        }).fail((e) => {\n            console.log(e)\n        });\n    }\n\n    /**\n     * Get course module single video progress.\n     * @param player\n     * @param html5player\n     */\n    const get_playlist_video_progress = (player, html5player) => {\n        let promise;\n\n        console.info(`Getting course video progresses from store...`)\n        promise = Ajax.call([{\n            methodname: 'mod_html5player_get_module_progresses',\n            args: {\n                id: html5player.cmid, // course module id.\n            }\n        }]);\n\n        promise[0].then(function(response) {\n            console.info(`Fetched module progresses result from store`);\n            if (response.progresses?.length > 0){\n                const playlists = player.playlist();\n                let result;\n                if (onPageLoaded){\n                    console.info('Current item progress set after first time dom load...');\n                    result = response.progresses[0];\n                    const index = playlists.findIndex(video => video.id == result.video_id);\n                    if (index>=0){\n                        player.playlist.currentItem(index);\n                        html5playerSetProgress(player, result);\n                        onPageLoaded = false;\n                    }\n                }else {\n                    const currentItemIndex = player.playlist.currentItem();\n                    const currentItem = playlists[currentItemIndex]\n                    result = response.progresses.find(video => video.video_id == currentItem.id )\n                    html5playerSetProgress(player, result);\n                }\n\n            }\n        }).fail((e) => {\n            console.log(e)\n        });\n    }\n\n    /**\n     * On Load meta data event and listener\n     * @param player\n     * @param html5player\n     */\n    const html5playerOnLoadSingleVideoMetaData = (player, html5player) => {\n        player.on('loadedmetadata', function(e){\n            console.info('Single video player meta data loaded...')\n            get_single_video_course_module_progress(player,html5player);\n        });\n    }\n\n    /**\n     * Event listener for single video.\n     * @param player\n     * @param html5player\n     */\n    const html5playerOnPlaySingleVideo = (player,html5player) => {\n        html5PlayerGenericPlayerEventListener(player, html5player);\n\n        player.on('ended',(e)=>{\n            const currentTime = Math.ceil( player.duration());\n            console.log(`Video ended... Video id: ${player.mediainfo.id}, Duration: ${player.duration()}`)\n            set_course_module_progress(html5player, html5player.cmid,html5player.video_id,currentTime,true)\n            player.clearInterval(interval);\n        })\n    }\n\n    /**\n     * On load playlists meta data\n     * @param player\n     * @param html5player\n     * @param onpageload\n     */\n    const html5playerOnLoadPlaylistMetaData = (player, html5player) => {\n        player.on('loadedmetadata',(e) => {\n            console.info('playlist videos player meta data loaded...');\n            get_playlist_video_progress(player, html5player);\n        });\n    }\n\n    /**\n     * Event listener for playlist.\n     * @param player\n     * @param html5player\n     */\n    const html5playerOnPlayPlaylist = (player, html5player) => {\n        html5PlayerGenericPlayerEventListener(player, html5player);\n        player.on('beforeplaylistitem', e => {\n            console.log(`Event: beforeplaylistitem -> Switching to new video ...`);\n            player.clearInterval(interval) ;\n        });\n\n        player.on('ended',(e)=>{\n            const currentTime = Math.ceil( player.duration());\n            console.log(`Video ended...`)\n            set_course_module_progress(html5player, html5player.cmid,player.mediainfo.id,currentTime, true)\n            player.clearInterval(interval);\n            const nextVideo = player.playlist.next();\n            console.info(`Start playing to next video : ${nextVideo.id}`)\n        })\n    }\n\n    // const initBrightCovePlayer = (course, cm, accountId, playerId, video_id) => {\n    const initBrightCovePlayer = (html5player) => {\n        html5player = JSON.parse(html5player);\n        // Make brightcove js in Require js module as bc.\n        loadBrightCoveJs(html5player.account_id, html5player.player_id);\n\n        require(['bc'], function(bc) {\n            console.info(`Brightcove player js loaded...`);\n            // Tracking is enabled for only student.\n            if (html5player.is_student ){\n                const myPlayer = videojs.getPlayer(`brightcove-player-${html5player.player_id}`);\n\n                if (html5player.video_type == VIDEO_TYPE_SINGLE_VIDEO){\n                    // Do meta loaded stuffs here.\n                    console.info('User is a student and Video type single video...');\n                    html5playerOnLoadSingleVideoMetaData(myPlayer, html5player);\n                    // Do Start playing stuffs here.\n                    html5playerOnPlaySingleVideo(myPlayer,html5player);\n                }else if( html5player.video_type == VIDEO_TYPE_PLAYLIST) {\n                    console.info('User is a student and Video type playlists video...');\n                    html5playerOnLoadPlaylistMetaData(myPlayer, html5player);\n                    onPageLoaded = true;\n                    html5playerOnPlayPlaylist(myPlayer, html5player);\n                }\n            }\n        });\n    }\n\n    return {\n       init: initBrightCovePlayer\n   }\n});"],"file":"brightcove.min.js"}